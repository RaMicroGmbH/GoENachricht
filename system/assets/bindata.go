// Code generated by go-bindata.
// sources:
// views/base.html
// views/index.html
// views/base/footer.html
// views/base/header.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4a\x2c\x4e\x55\xaa\xad\xe5\xe5\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\x03\x0a\x80\x68\x85\x9c\xc4\xbc\x74\x5b\xa5\xd4\x3c\x25\xa0\x88\x02\x10\xd8\x64\xa4\x26\xa6\x40\xd9\x20\x50\x5d\x5d\x92\x9a\x5b\x90\x93\x58\x02\x34\x0b\x24\xa5\xa4\xa0\x07\x32\x0d\xac\x54\x1f\x49\xad\x4d\x52\x7e\x4a\xa5\x1d\x90\x01\xe1\x42\x48\x64\xcd\x20\x79\xa8\x66\x4e\x64\xf1\xb4\xfc\xfc\x12\x14\x43\xc1\x06\x01\x9d\xa7\x0f\x75\x67\x75\x75\x6a\x5e\x0a\x48\x1a\x10\x00\x00\xff\xff\xbf\x55\xfb\x4c\xd5\x00\x00\x00")

func viewsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHtml,
		"views/base.html",
	)
}

func viewsBaseHtml() (*asset, error) {
	bytes, err := viewsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base.html", size: 213, mode: os.FileMode(438), modTime: time.Unix(1448630302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x52\xc1\x6e\xdb\x30\x0c\x3d\xdb\x80\xff\x81\xd5\xa5\x97\xc9\x5e\xd0\x4b\x51\xc8\x02\x02\x23\x5d\x73\x58\x02\x78\xc1\xee\x8a\xcd\xd4\x02\x1c\xc9\xb0\xd5\x74\x9d\x91\x7f\x1f\xa9\xa6\x58\x83\x01\xd3\x21\xa1\xc9\x27\x92\xef\x3d\xcd\x73\x8b\x07\xeb\x10\xc4\xde\xb7\x6f\xe2\x7c\xce\x52\x00\x75\xc4\x60\xa0\xe9\xcc\x38\x61\x28\xc5\x4b\x38\xc8\x7b\xa1\x81\x4e\xac\x06\x1b\x7a\xd4\xf3\x9c\xef\x38\x38\x9f\x55\xf1\x9e\xb9\x94\xe3\x65\x67\x8e\x58\x8a\x93\xc5\xd7\xc1\x8f\x41\x40\xe3\x5d\x40\x47\xcd\x5e\x6d\x1b\xba\xb2\xc5\x93\x6d\x50\xc6\x8f\x2f\x60\x9d\x0d\xd6\xf4\x72\x6a\x4c\x8f\xe5\x22\xff\x2a\x74\x96\xaa\xa2\x43\xd3\x72\xc0\x9b\x01\x05\x89\xba\x91\x12\xaa\xed\x66\xb7\x5c\x6f\x56\x35\x3c\x6e\x6b\x58\xc9\xcd\xb2\x7a\xaa\xd7\xd5\xd3\x0e\x40\x4a\x4d\x2b\xa8\xd6\x9e\xa0\xe9\xcd\x34\x95\x82\xc7\x1a\xa2\x37\x72\x47\xda\xff\x73\x6d\x30\x0e\x7b\x88\xbf\x92\x44\x30\x2f\x7d\x60\x54\x92\x24\x11\x75\x05\x93\xbc\x8b\x75\xcf\x51\x85\x88\x49\x54\xb7\xb8\x86\x44\x11\x04\x98\xde\x3e\x3b\x9a\x4c\x6c\x79\xac\x9a\xa8\xaa\xd5\x5e\xd7\x4b\xf9\x7d\x5d\xd5\x5b\x88\x19\x98\xc2\x1b\x71\xbd\x6d\x7c\xef\xc7\x07\x18\xb1\xbd\xd5\xdf\xbc\x2a\x22\x1a\x96\xc3\xc0\xcc\x4c\xd3\x8d\xb6\xe9\x02\xa8\x62\xaf\x3f\x5f\x13\x07\xe2\x25\x27\xfb\x1b\x1f\x60\x71\x3f\xfc\x12\xec\xc6\x4f\x1c\x27\xeb\x1d\xfb\xf1\x3e\xf3\xe3\xaf\x5b\x44\x5a\xec\x9f\x2a\x88\x9a\x06\xde\x9f\x52\x70\x39\xff\xa8\x22\xe3\x63\xd0\x1f\x44\xef\x74\xe5\x8f\xc4\x1e\x7e\x78\xef\xf2\x3c\xbf\xa1\x9e\x77\x17\xa9\x62\x43\xf6\xe6\x12\xc0\xdf\x0c\xbb\xb5\xda\x3e\xfe\xc7\x31\x32\x2c\x4b\xb3\x74\x9e\xd1\xb5\xfc\xf4\xb2\xf4\x4f\x00\x00\x00\xff\xff\x22\x3e\xef\x64\x90\x02\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 656, mode: os.FileMode(438), modTime: time.Unix(1448630302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsBaseFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x4e\xf4\x30\x0c\x85\xd7\xf3\x4b\xff\x1d\x4c\xf6\x99\x5c\xa0\xd3\x05\xac\x40\xec\x90\xd8\xa7\x4d\x06\x5c\x4d\x93\xe0\xb8\x15\x55\x35\x77\x27\x69\x03\x1a\xc1\x20\xd1\x9d\xeb\x3e\x7f\xef\xb9\xf5\x3c\x1b\x7b\x44\x67\x41\x1c\xbd\x67\x71\x3e\xff\xff\x57\xe5\xca\x52\x5d\xa9\x52\xa4\x96\x32\x38\xd6\x50\xdd\x48\x09\xaa\xf5\x8e\x75\x1a\x21\x90\x32\xbf\xcb\xcd\xfb\x3e\x78\x62\x74\x2f\xf0\x88\x0d\x69\x42\x1b\x41\x81\xb1\xc1\x3a\x63\x5d\x9b\x1f\x17\x71\x91\x3f\xbc\x0d\x96\xa6\xa2\x9d\x0a\x27\xb6\x84\x81\x81\xa7\x60\x0f\x82\xed\x3b\xab\x4e\x8f\x7a\xed\x0a\x88\xd4\x1e\x84\xea\xa2\xea\x96\xd9\x7d\x8f\x6e\xdf\x45\x91\x52\xae\x8a\x1a\xb6\x22\xe4\x80\xdf\x08\x50\xe2\xdd\xa6\xbd\x23\x93\x0e\x17\xdb\xa4\x8c\x1b\x1c\x9a\x4f\xc2\xcf\x9c\xc5\xe3\x29\xa0\xbb\xfc\x00\xbb\xdd\xdf\xe9\x31\xcd\xfe\x0a\x1e\xf5\x09\x8d\x66\xf4\x6e\x2b\xf6\x2b\xf4\xf3\x8a\xf0\x74\xcd\xa4\xd8\xdc\x0d\x91\x7d\x7f\xf5\x17\xe7\x7b\x69\xbc\x99\x96\xc3\x79\xe5\xfe\x94\x8a\x79\x4e\xb2\x7c\x5d\x1f\x01\x00\x00\xff\xff\xc8\xa3\x68\x9e\x71\x02\x00\x00")

func viewsBaseFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseFooterHtml,
		"views/base/footer.html",
	)
}

func viewsBaseFooterHtml() (*asset, error) {
	bytes, err := viewsBaseFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/footer.html", size: 625, mode: os.FileMode(438), modTime: time.Unix(1448630915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsBaseHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x4d\x6b\x1b\x31\x10\x86\xef\x06\xff\x87\x89\xce\x95\x97\x1e\x02\x29\x78\x0d\x26\x98\xd6\x50\x53\x30\x6d\x29\x84\x1c\xe4\xd5\x6c\x77\x5c\x7d\x6c\x34\xb3\x76\x82\xc9\x7f\xaf\xbc\x4e\xdd\x60\x72\xe8\xf6\x28\xf1\x3c\xaf\x5e\xad\x66\x0f\x07\x8b\x35\x05\x04\xd5\xa0\xb1\xea\xf9\x79\x3c\x1a\x8f\xa6\x1e\xc5\x40\xd5\x98\xc4\x28\xa5\xea\xa4\xd6\x37\x6a\xf6\x67\xbf\x11\x69\x35\x3e\x74\xb4\x2b\xd5\x0f\xfd\x6d\xae\x6f\xa3\x6f\x8d\xd0\xc6\xa1\x82\x2a\x06\xc1\x90\xa5\xe5\xa2\x44\xfb\x13\xff\x6a\xc1\x78\x2c\xd5\x8e\x70\xdf\xc6\x24\xaf\xc8\x3d\x59\x69\x4a\x8b\x3b\xaa\x50\xf7\x8b\x77\x40\x81\x84\x8c\xd3\x5c\x19\x87\xe5\xfb\xcb\x14\x8b\x5c\x25\x6a\x85\x62\x78\x15\x74\x49\x99\x4e\x9a\x98\x2e\x01\x21\x71\x38\x5b\xcf\xf5\x6a\x79\xbb\xfe\x02\x1f\x23\xcc\xdb\x16\x16\x7a\x65\xc8\xc1\xe2\xf1\x58\x0e\xd3\xb4\x38\x61\x99\x77\x14\x7e\x41\x42\x57\x2a\x96\x27\x87\xdc\x20\xe6\xf6\x4d\xc2\xba\x54\x45\xc5\x5c\x6c\x62\x14\x96\x64\xda\x89\xa7\x30\xc9\x3b\xaa\xf8\x27\xaf\xce\xb5\xb4\xd9\x23\x47\x8f\x03\xd5\xed\x43\x87\xe9\x49\x77\x34\xc0\x31\x81\xbc\x11\x1c\x60\x9c\x2f\xf6\xdd\x38\xb2\x46\x62\x1a\x58\xf3\x1c\xa0\xab\xe8\x37\x79\xca\xec\x24\x44\x4d\xf9\x3d\xf8\xbf\x93\x12\x72\x9b\x7d\xda\x0d\xfd\x66\x14\x2c\x3e\x9e\xf9\x6c\x5c\x69\x0d\x9f\xbe\xae\x3e\x5f\x03\x37\xe4\xc1\x04\x0b\xeb\x3e\xdc\x4e\xb6\x0c\x75\x4c\xb0\x5c\xdc\x00\x77\xed\x71\x24\x20\xd6\x2f\x30\x3a\xf4\x79\x9a\xb8\x17\x3c\x5a\x32\x70\x7c\x0d\x42\x06\xad\x67\xa7\xdc\x3b\xaa\xc1\x49\xf6\xe1\xc3\xfd\x71\xeb\x34\xad\xc0\xa9\xca\x65\xb6\x5c\x34\xe2\xdd\x75\x3e\x75\xd7\xdf\x61\xcb\x6a\x36\x2d\x4e\xcc\x5b\x74\x7a\x69\xf5\x16\x7b\x75\x87\xc1\x52\x7d\xdf\x1f\x3d\x1e\x1d\x0e\x79\x79\xfc\x89\x7f\x07\x00\x00\xff\xff\x14\xaf\x69\xbd\xd8\x03\x00\x00")

func viewsBaseHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHeaderHtml,
		"views/base/header.html",
	)
}

func viewsBaseHeaderHtml() (*asset, error) {
	bytes, err := viewsBaseHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/header.html", size: 984, mode: os.FileMode(438), modTime: time.Unix(1448630302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/base.html": viewsBaseHtml,
	"views/index.html": viewsIndexHtml,
	"views/base/footer.html": viewsBaseFooterHtml,
	"views/base/header.html": viewsBaseHeaderHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{viewsBaseFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{viewsBaseHeaderHtml, map[string]*bintree{}},
		}},
		"base.html": &bintree{viewsBaseHtml, map[string]*bintree{}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

