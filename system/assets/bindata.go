// Code generated by go-bindata.
// sources:
// views/auswahlliste.html
// views/base.html
// views/index.html
// views/index_ig.html
// views/base/footer.html
// views/base/header.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsAuswahllisteHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xc1\x6e\xdb\x38\x13\x3e\xbb\x40\xdf\x81\x3f\x81\xfe\x3d\x2c\x18\xd9\x6d\x03\x64\x5d\x59\x80\xdb\x75\xb7\x01\xd2\x04\x48\xb3\x5d\xa0\x97\x80\x92\x28\x8b\x1b\x5a\x14\x48\x2a\x71\x6a\xe4\xdd\x77\x48\x4a\xb4\xe4\x3a\x8d\x5b\x60\x7d\xb0\x38\xd4\xcc\xf0\xfb\x86\xc3\xe1\x68\xb3\xc9\x59\xc1\x2b\x86\x70\x2a\xf3\x7b\xfc\xf0\xf0\xfc\xd9\xf3\x67\xa3\xf8\x7f\x84\xa0\xf9\x5f\x9f\xff\x9e\x7f\x3c\x3b\x3b\xfd\x7c\xb5\x40\xef\x16\xf3\xcb\x77\x8b\xd3\xab\xc5\x39\x22\x24\x41\x56\x27\xe7\xb7\x28\x13\x54\xeb\x19\xce\x64\x65\x28\x78\x51\x38\x71\xf6\x08\xa1\xfe\xeb\x9a\x56\x4c\x20\xf7\x4f\x60\x39\xda\x08\x63\x15\x47\x23\xef\x64\xa0\x46\x4a\x46\x73\x5e\x2d\x71\x02\x4e\x9c\xce\x28\xa6\xa8\x54\xac\x98\xe1\xd2\x98\x7a\x1a\x45\x42\x66\x54\x94\x52\x9b\xe9\xf1\x78\x3c\x9e\x44\xac\xa2\x59\xa9\x78\x56\x9a\xa8\xe1\x18\x39\xcf\x28\xfc\x62\x0d\x7e\xbb\x25\x96\xe2\xbe\x2e\x39\xc0\x45\x61\x44\xb2\x92\xdd\x2a\x78\x0a\x56\x18\x54\x37\x42\xb8\x11\x46\xda\xdc\x0b\x36\xc3\x05\x70\x23\x9a\x7f\x63\xd3\xc9\xd1\x31\x5b\xbd\xc5\x49\x1c\x59\x97\x83\x65\xe2\x88\x26\x2d\xd8\x72\x32\xe4\x63\xb8\x11\x0c\x23\x2a\xf8\xb2\x82\x48\xb1\xca\xd8\x30\x39\x54\x49\x9c\x26\x97\x73\xf2\xe9\xf4\xfd\xe5\x45\x8b\xd3\x2f\xfa\x32\x93\x42\xaa\x29\x52\x2c\x7f\x99\xfc\x29\xdb\x05\xd1\xbc\xae\xd1\x82\x9c\x77\x6c\x61\xd5\x34\xe9\x9b\xf5\xb0\xa2\xc9\x49\xbd\xc6\xc9\x66\x73\xf4\x85\x29\xcd\x65\xf5\xf0\xd0\x7a\x09\x8f\x72\x12\x28\xc4\x11\xec\x43\x82\x2c\x7e\xbf\x7b\x9e\xd4\xee\x16\x12\x97\x23\x1d\xd1\x83\x36\xd8\xbb\xb7\xe9\xe4\xf4\x79\x3e\xc3\xb4\xd1\x77\xb4\x14\xd7\x36\x69\x94\x14\x1a\xef\x5b\xc3\x66\x99\x77\xe0\x20\xb9\x5f\x6c\x68\x2a\x58\xa7\xed\x85\x54\xaa\x9c\x29\xc1\xb4\x46\x26\x15\xa4\xf5\x2d\xb8\x06\x00\xde\x0a\x85\x3c\x72\x2e\xac\xfb\x7d\x6f\xda\x81\x9d\x03\x2d\xd5\xad\xb2\xf5\x8f\x03\x1e\xeb\x26\xef\x49\xc3\xa3\x50\xb2\xec\x26\x95\x6b\xd4\x0d\x88\x6e\xb2\xcc\xe2\xcb\x52\xf2\x8d\x17\x05\x53\x95\x85\x88\x07\x0e\x78\x55\x37\x06\x99\xfb\x9a\x6d\x3d\x60\x17\xad\x2c\xbd\xfe\xea\xad\x30\x8a\x06\x36\x82\xa6\x10\xf4\x42\xaa\x81\x52\xf2\xff\x2a\xd5\xf5\xdb\xaf\xdb\x95\xe2\xc8\x69\x0e\x6c\xdd\x7e\x07\xb1\x47\x2c\x02\x66\xfb\xe6\x7f\x91\xf0\x60\x3f\x7a\x0e\x9e\x60\x3c\xf7\x66\x3b\x8c\x77\x29\x77\x5a\x2d\xe5\xf9\x76\x2d\x86\x60\xe1\x1b\x41\xeb\x9a\x55\x8f\xd3\xdf\xa1\x3d\x48\x87\xef\x18\xd7\x21\x4b\xc9\xad\x54\x3a\x2b\x05\x85\x1a\xf5\xa5\x1b\xc6\x51\x9d\xec\xf8\x3b\x28\x7a\x08\x4e\x3a\xd1\x2b\xf2\x3b\x4a\x4d\x45\x96\x4a\x36\x35\xd2\x4c\xb0\xcc\xa0\x42\x48\x6a\xda\xaa\xe4\x4e\x06\xa8\x02\x25\xcd\x50\x18\xf0\xca\x96\x29\x71\x0f\x31\xbc\xe3\xb9\x29\xa7\x27\xc7\x2f\x86\x71\x06\x92\xe8\xc0\x5f\x9c\x36\xc6\x40\x65\xf4\x7b\xe2\x85\x70\x36\x01\x9d\x43\xd8\x9e\xee\x00\xdb\x6f\x19\xbc\xb9\xd6\x4d\xfa\x0f\xc0\xf6\x5b\xed\x77\x04\xea\x93\xf3\x62\xef\x8b\xff\x04\x45\xae\x64\x9d\xcb\xbb\x8a\x18\xb9\x5c\xda\x2a\x9b\x53\x43\x5b\x61\x86\xbb\xb7\x50\x7c\x15\xa7\xa4\xa4\xba\x96\x75\x53\x43\xe9\x50\x0d\x6b\x27\xd9\x1a\x62\x9b\x33\xe0\x50\x50\xa1\x59\xa8\xfa\x2e\x9c\xb3\xc9\xd8\x85\xf3\x50\xec\x0e\x7f\xff\xba\xc9\xa8\x62\xa6\x77\x61\xfc\xb2\x23\xad\x88\xac\x04\xd4\xc5\x2b\xc7\x0d\xfd\xd1\x52\xfb\x69\xcf\x61\x4b\x7a\x85\xef\x60\xdb\x46\x74\x78\x42\xe0\x57\xac\x6a\x90\xce\x94\xcd\x48\xa8\xc7\x5e\xb6\x39\xc0\x0d\x5b\x91\x36\x27\x74\x97\x2e\x93\xb1\xcf\x17\x98\x77\x79\x32\x88\xf6\x74\x32\x1e\xbf\x70\xd7\x6b\x23\x0e\x64\xb4\xff\x20\x3f\x7e\xf0\xda\xdc\x3a\x2c\xb9\xec\x98\xe6\x39\x46\x21\xc5\xad\x94\xfc\xf6\x7d\x08\x77\x96\x05\x49\x0d\x24\x77\xe7\x84\x5b\x2c\x72\x37\x57\xe2\x63\x6f\x6f\x1c\x37\x0b\x57\x64\xd0\x18\x16\xac\x98\xaf\x96\x0e\x02\x3c\xaf\x3f\x32\x51\x07\xc4\x30\x51\x3a\x59\xab\x6c\x86\x23\x10\x23\x2b\x93\xd7\xaf\xd6\xaf\x5f\x1d\xd5\xd0\x44\x41\xdb\x61\x66\xd8\x19\xf5\x4a\xe9\xc0\xe3\x69\x55\xc8\xbe\x47\xee\xe4\xad\x47\x2b\x5f\xbf\x39\x59\xbf\x39\xe9\x79\x74\x46\x51\xe0\xe0\x79\x0d\x61\x6f\x2f\x70\x77\xfd\x77\x3d\x46\x98\xf6\x72\xab\xd2\x6b\x29\xda\xfc\x70\x79\xe3\x93\xa4\xc5\x56\xca\x5b\xa6\xae\x6c\xec\xf0\xd0\x6c\xe4\x32\xd3\xda\x35\x62\xaf\xa5\x15\x7c\x6d\x0d\x96\xbe\x27\xf9\x04\x4d\x2b\x3a\x83\xb7\xa8\x64\x8a\xb5\x8d\xad\x07\xd7\x88\x1d\x6c\x3d\xb8\xbe\x75\xdd\x4e\x6c\x5b\xd9\x41\x27\x53\x48\x09\xbd\x1e\xcc\x31\xaa\x0a\xbe\xee\x57\x92\x1d\x75\xdb\x74\x2a\xbe\x2c\xcd\x6e\xb5\xe9\xe5\xec\x23\x59\xea\x04\xb1\xdc\xd6\xe1\xae\xbd\xd2\xf4\x76\x1b\xa8\xd1\x93\x5d\xb0\xbc\x19\x34\xb6\x8e\x60\xc8\xf3\xfd\x90\x7e\x70\x6e\xf6\x01\xca\xe1\x5a\x33\x3f\x03\x49\xb1\x95\xb4\x1c\x9e\x84\xb5\xdd\x8c\xa1\xd4\x6e\x4d\x10\xbb\x41\xf7\x85\xb3\xb8\xf8\x80\xde\x5f\x9c\x5f\xcd\x4f\xcf\x17\x97\xe8\xc3\xc5\xe5\x8f\xbe\x79\xac\xd9\x66\xc3\xaa\xdc\x7e\x23\xfd\x1b\x00\x00\xff\xff\xd8\x63\xa7\xe7\x37\x0d\x00\x00")

func viewsAuswahllisteHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsAuswahllisteHtml,
		"views/auswahlliste.html",
	)
}

func viewsAuswahllisteHtml() (*asset, error) {
	bytes, err := viewsAuswahllisteHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/auswahlliste.html", size: 3383, mode: os.FileMode(438), modTime: time.Unix(1455552364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4a\x2c\x4e\x55\xaa\xad\xe5\xe5\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\x03\x0a\x80\x68\x85\x9c\xc4\xbc\x74\x5b\xa5\xd4\x3c\x25\xa0\x88\x02\x10\xd8\x64\xa4\x26\xa6\x40\xd9\x20\x50\x5d\x5d\x92\x9a\x5b\x90\x93\x58\x02\x34\x0b\x24\xa5\xa4\xa0\x57\x5b\xcb\xc9\x09\x55\xac\x8f\xa4\xda\x26\x29\x3f\xa5\xd2\x0e\xaa\x0d\x22\x84\xac\x19\x24\x0b\xd6\x0c\x94\xe3\x44\x96\x48\xcb\xcf\x2f\x81\x49\x40\x0c\x05\x1b\x04\x74\xa0\x3e\xd4\xa5\xd5\xd5\xa9\x79\x29\x20\x3f\x00\x02\x00\x00\xff\xff\xd0\x62\xc2\x46\xd7\x00\x00\x00")

func viewsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHtml,
		"views/base.html",
	)
}

func viewsBaseHtml() (*asset, error) {
	bytes, err := viewsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base.html", size: 215, mode: os.FileMode(438), modTime: time.Unix(1449828984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x5f\x53\xdb\xb8\x16\x7f\x36\x33\x7c\x87\x73\x3d\x73\xdb\x87\x7b\x4d\x48\xef\xf4\x4e\x4b\x1d\xcf\x64\x69\xba\x65\x76\x17\x3a\xc0\xf6\x95\x91\x6d\x25\xd6\xa2\x58\x1e\x49\x86\x50\x86\xef\xbe\x47\xb2\xfc\x37\x01\x12\xe8\xfa\x01\x2c\xf9\xe8\xe8\xfc\xf9\x9d\xf3\x53\x74\x7f\x9f\xd2\x39\xcb\x29\xf8\xb1\x48\xef\xfc\x87\x87\xfd\xbd\xfd\x3d\x80\x70\x49\x35\x81\x24\x23\x52\x51\x3d\xf1\x4b\x3d\x0f\x3e\xf8\x11\xe0\x63\xbf\x6a\xa6\x39\x8d\xee\xef\x0f\x2e\xcd\xcb\xc3\x43\x38\xaa\x66\xdc\x67\xbb\x38\x27\x4b\x3a\xf1\x6f\x18\xbd\x2d\x84\xd4\x3e\x24\x22\xd7\x34\x47\x65\xb7\x2c\xd5\xd9\x24\xa5\x37\x2c\xa1\x81\x1d\xfc\x17\x58\xce\x34\x23\x3c\x50\x09\xe1\x74\x32\x3e\x38\xf4\xa3\xfd\xbd\x70\x94\x51\x92\x9a\x17\x63\x1b\xfe\xf7\xf0\xf5\x5f\x41\x00\xc7\x67\xa7\x97\xd3\x93\xd3\xd9\x39\x7c\x39\x3b\x87\x59\x70\x3a\x3d\xfe\x7a\x7e\x72\xfc\xf5\x12\x20\x08\x22\xb4\x21\x4c\xd9\x0d\x24\x9c\x28\x35\xf1\xcd\xbe\x04\x3d\x94\x7e\xa5\x01\x7d\xe8\x7e\x2e\x48\x4e\x39\xd8\xbf\x01\x86\x82\x94\x5c\x5b\x41\xcf\x5b\x93\x0a\x8c\x39\x2c\x5f\xd8\x40\x58\x11\x2f\xcc\xc6\x7d\x11\x1b\x07\x1f\x08\x67\x8b\x1c\xf7\x46\x87\xcd\xc6\xa1\xc2\xaf\x51\x18\x47\xe7\xd3\xe0\x8f\x93\xe3\xf3\x33\xb0\x33\xa0\xf4\x1d\xba\xfb\x36\x11\x5c\xc8\x23\x90\x34\x7d\x1b\xfd\x2a\xc2\x91\x95\x86\x69\x51\x18\xdf\x48\x92\x49\x96\x64\x1a\xc2\x51\x1c\x75\x97\xf9\x73\xf4\x2c\x50\xec\x07\x3d\x82\xf1\x87\x62\xe5\x9b\x84\x7c\xa7\x52\x31\x91\x9b\x94\x54\x7b\xd6\xff\xb2\xb1\xf5\xca\xa4\x30\x1c\xa1\x67\x11\x18\xfb\x5b\x47\x59\x3a\xf1\x31\xf6\x52\x5f\x15\x9c\x24\x34\x13\x3c\xb5\x96\x5b\x59\x14\x03\xf7\xac\x47\xc5\x02\xc7\xae\xb7\x63\x3b\xac\x22\x58\xa9\x07\x2f\x9c\x0b\xb9\x04\x29\x2a\xa3\xe5\xd2\xaf\x15\x98\x41\xc0\x72\x8e\xe9\xa9\x34\xcc\x97\x57\xa8\xa3\x10\x4a\x5f\x0b\x19\xfb\x91\xe7\xc2\x6c\xb2\x7e\x41\x13\x8d\xae\x01\x2e\x82\x69\x1e\xcc\xbe\x39\x29\x93\x73\xcf\x3d\x95\xb8\x17\x6a\x12\x73\x5a\xef\x52\x0d\x62\x21\xd1\x23\x4e\x95\xf2\xa3\x9e\xb0\x17\x26\xa4\x30\x9a\x4d\x82\x50\x33\x06\xbd\x56\x6d\x43\x3e\xaa\x3f\x3b\x79\x1b\x05\x6d\x21\x09\xfd\x6d\xcd\x17\xdc\x5b\xd6\x1b\xaf\x6f\xe9\x0d\x0c\xb5\xb6\xa6\x43\xf3\xbd\x01\xfa\x10\x1f\x81\x5a\x06\xff\x87\x58\xe7\xc1\x42\x8a\xb2\x00\x45\x39\x86\x03\x6c\x00\xed\x4c\x15\xbf\x52\x61\xfe\xaf\xb4\x58\x2c\x10\x85\x91\x05\xfb\x56\x4f\x18\x97\x5a\x63\x6c\xf5\x5d\x81\x39\xaa\x06\x4d\x96\x70\x57\xbb\xb3\x2b\x0f\x70\xe6\xbc\x07\xbf\x46\xa2\xad\xe2\xa3\x8f\x87\xff\xfe\x54\x99\x81\xd2\x57\xd6\x14\xce\x14\x96\x13\xbc\xc9\x63\x55\x7c\x32\x08\xb6\x9a\x23\x78\xad\x65\xbd\x7d\xdf\x9b\x6d\x1f\xb1\x35\x95\xa2\x48\xc5\x6d\x1e\xb8\x98\x40\x4a\x34\x71\x83\x89\x5f\x7f\xc5\x82\x95\x8c\x04\x19\x51\x85\x28\xca\x02\x21\x23\x4b\xea\x26\xe9\x0a\x61\x9d\x52\x03\x4e\xc2\xd5\x4e\x51\xf5\xaa\x72\xad\xb3\x48\x24\xd5\x7e\x5d\x91\xdb\x6b\xb1\x51\xe8\x2a\x52\x32\x10\x39\xc7\x22\xbb\xb4\x6e\xc0\x67\xe7\xc5\xce\x9a\xdb\x7c\xec\xf0\xec\xa0\xbe\xe4\xb5\xc9\x4d\x1a\x96\x34\x2f\x41\x25\xd8\x0b\xb8\xa9\xca\x6a\x6c\x50\xc2\x34\x5d\x06\x16\x33\x0d\xbe\x3a\x90\xb6\x38\x72\x1d\xc4\x2c\xf1\x01\xe3\x58\xf2\x2d\x7d\xad\x9a\xd8\x7a\x8d\x3d\x5d\x6e\xff\x43\xfe\xa3\xc9\x75\x2c\x56\xcd\x4b\xa0\xca\x24\x31\xe5\x0c\xd6\x34\x55\x75\xa4\x2b\x25\xb0\x0e\x35\xc9\x7f\x50\xb6\xa0\x08\xa6\xa8\xa3\xd8\x0b\x59\x5e\x94\xda\xe1\xb7\x56\x54\xb9\x96\xc4\x6e\x69\x5e\x37\x79\x7f\xd4\x5f\x8b\x41\x42\x76\x42\x91\x8d\xc2\x91\xab\xab\xea\xdf\x94\x2b\xb8\xe8\x4b\x40\x6d\x53\x38\xb2\x9a\xba\xca\x7b\x41\xd9\x22\x2a\xc3\x56\x53\x3b\x4f\xc9\xb5\xa6\x57\x38\xd9\xb6\xb8\x0a\x26\xbd\x61\x58\xf4\xf4\x18\x52\x96\x26\xcc\x9a\x68\x96\xf8\xd1\x2c\x98\xa2\x96\x23\xcc\x54\xb1\x6e\xe3\x8b\x0c\x62\x79\xb7\xe7\x0e\xad\xe9\xe6\x44\xd3\x95\xf6\x37\x59\x57\xa9\x65\x4e\x63\x3f\xad\x2e\x7a\xcd\x4c\x05\xb3\x4d\xad\x1c\x67\x65\xb3\x12\x07\xf5\x59\xc6\x0d\x4d\x15\xb8\x61\x13\xb4\x30\x93\x5d\x02\xb5\xf4\x37\x3b\xfb\xf2\x24\x03\x0e\xe5\x7b\xc2\xed\x21\xc2\x71\xe5\x2e\x3c\xd9\x90\x5b\x97\x27\x1b\x8d\xcf\x51\x64\x13\x9e\x2d\x38\xb2\x4f\x8a\xb0\x35\x20\xa1\x28\x39\x0f\x38\x9d\xeb\xd7\xa1\xf0\xbb\x90\x9c\x60\xb5\x3c\x8f\xc3\xe7\x4d\x72\x4d\x64\x7c\xd8\x92\x76\x85\xa7\x1b\xb7\x49\xc3\xd2\x4f\x18\xfc\x12\x5a\xfe\xd8\x52\xb0\x2a\xe3\xbf\x10\x05\x55\xf3\xec\x53\xb5\xe1\xcc\xd7\xf0\xf2\x4e\x96\xad\x91\x70\x6d\xa0\xa5\xc4\x3a\x20\x3f\x81\x9b\xd7\xcf\x05\xbb\xf1\xec\xcf\xe2\xeb\x7f\x84\xae\x9b\x2c\xd5\x18\xd9\x7e\xe5\xce\x44\xec\x90\xa3\x5a\x18\xbb\x1e\x5b\xc6\x1b\xd0\x34\x3e\x34\x27\xbf\x9a\x91\x07\x55\xb3\x3d\xe1\x8e\x61\x2e\x45\xaf\xa4\x25\x5b\x64\xbd\x9a\xee\x35\x72\x6f\x17\x10\xb6\xa0\x23\xa5\xba\x25\x19\x37\x7e\x0c\x9a\xba\xd7\x3f\xb0\x75\x57\xf7\xc5\x90\xd4\x9b\x92\x27\x30\x47\x20\xa2\xba\x42\x31\x15\x64\x26\x0c\x6c\xa0\xb4\x4e\x74\x77\x6a\x90\xcb\x0d\x4d\xc6\xd2\xc9\x0b\x68\xa4\x43\x1f\x96\x08\x86\xcc\x31\x20\x83\x66\x87\xc7\x7e\x6a\x69\x8d\x0b\x28\xe2\x03\xe1\xf0\xd2\x9f\x5a\x36\x5f\xd0\x23\x81\xd7\xf3\x43\xaf\x5b\xf6\xda\x70\x0b\xa3\x39\xe3\xf4\xcf\x82\x0b\x92\xc2\xb0\x2b\x75\x48\xc3\xa1\x79\x49\xe4\x82\x99\x2e\x55\x1c\xbd\x2b\x56\x9d\xdf\x32\xc4\xc6\xc0\x84\xc0\x35\x94\x0a\x7f\x2d\x64\x06\x09\xc7\x18\x0e\x11\x52\x90\x82\xca\x04\x51\x02\xef\xf0\x97\xfa\x34\xb7\x2d\xcf\x40\xc5\xeb\xc4\xb4\x87\x6f\xcf\x73\x52\x7d\xe0\x74\x9a\x46\x3b\xdb\x3d\xcf\x18\x97\x9b\x2a\x28\xad\xef\xcd\x49\xa6\xe3\x08\x8c\x5a\x86\xed\x3e\x8f\x1e\x11\x37\xca\xec\x42\x84\x4f\x52\x5d\x7d\x26\xdb\x78\x0e\xeb\x1e\xd4\xd6\x3c\x31\x17\x4d\x78\x20\x5f\xeb\x48\x3e\x74\x6e\x32\x26\xbe\x0b\xe6\xc1\xc1\x01\x1e\xb2\xb7\xf6\xf9\x35\xe5\x38\x50\xb2\xb1\x18\xa7\x8d\x1b\xaa\x39\xc5\x85\x23\xe3\xbd\x6d\x9c\xd5\x78\x58\x92\xdd\x5b\x21\x9a\x32\x8d\x53\xcd\xda\xfa\x2e\x87\xa6\xfa\x6a\xd6\x88\x61\x08\x49\xcc\x90\x2a\x57\x13\x3f\x18\xd7\xd7\x3a\x1d\xf5\x43\xbb\xea\x2d\xd6\x77\x70\x26\x9a\xf5\xcd\xca\xcf\x27\xdf\xe1\x9b\xbd\x48\xfb\x05\xe3\xd0\x3f\x64\xb6\x7b\x7c\x39\x3b\xbb\x9c\x9d\x43\xdf\xd6\xde\x55\xd2\x5c\x08\x4d\x4d\xe9\x53\x22\xe7\x6c\xd5\x65\xef\x81\x78\xcb\x0e\x4d\xd4\x1d\x19\x3c\x76\x08\x31\xef\x7c\x81\x81\x30\x37\x74\x13\xff\x82\x62\x34\xf2\xb6\xc4\x97\x04\x41\xa5\x70\xb2\x6d\x33\x3d\x32\x58\xf0\xbb\x22\x63\x88\x48\x68\xde\x02\x9a\xdf\x50\x2e\x0a\xda\x39\x24\x38\x00\x34\xdd\xbd\x4b\xc3\xcf\xdb\x38\x34\xf2\xec\x37\xf8\x0f\x5c\x24\x19\x67\xf4\x8d\xfa\xc1\xd9\xe2\xd3\xba\xc9\xe4\x86\xee\x60\xb2\xb8\xde\xd9\xd8\x2d\xe3\xf9\xa4\x95\x09\xc9\x13\xca\x77\xb0\x53\xd2\xa5\xb8\xd9\x26\xb0\x2d\x6f\xf6\x47\x5e\xfb\xb3\xc9\xe1\xee\x29\x00\x7f\x9b\x9e\xce\x7e\xef\x48\x40\xad\xa6\x91\x78\xfc\xce\xd9\xae\xda\xdf\xbb\xbf\x47\xf0\x54\xf7\xe7\x7f\x07\x00\x00\xff\xff\x6a\x8f\xa3\x7a\x55\x17\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 5973, mode: os.FileMode(438), modTime: time.Unix(1455273873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndex_igHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xcd\x6e\xdb\x38\x10\x3e\x3b\x40\xde\x81\xcb\xc3\xf6\xb2\xaa\x92\xd3\x16\xa9\x4c\x40\x9b\x2a\xdd\x00\x89\xb5\x70\xdc\x00\x3d\x05\x94\x34\xaa\x88\xb0\xa4\x20\x32\x6e\x52\x23\xef\xbe\x24\x25\x4a\x94\xe3\x64\x7f\xe4\x83\x34\xc3\x99\x6f\x66\x3e\xce\x90\xde\xed\x2a\xa8\x99\x00\x84\x0b\x59\x3d\xe1\xe7\xe7\xe3\x23\x84\x92\xef\xa0\x29\x2a\x1b\xda\x29\xd0\x4b\xfc\xa0\xeb\xe8\x03\x26\xc8\x3c\x6e\x55\x33\xcd\x81\xec\x76\xef\x37\xf6\xe3\xf9\x39\x89\x7b\xcd\xb0\xec\x9c\x05\xfd\x0e\x4b\xbc\x65\xf0\xa3\x95\x9d\xc6\xa8\x94\x42\x83\x30\x60\x3f\x58\xa5\x9b\x65\x05\x5b\x56\x42\xe4\x84\xdf\x10\x13\x4c\x33\xca\x23\x55\x52\x0e\xcb\xd3\xf7\x27\x98\x1c\x1f\x25\x71\x03\xb4\xb2\x1f\x36\x33\xf3\x5e\x24\xbf\x44\x11\xba\x4a\xbf\xe6\x5f\x36\x28\x8a\x9c\xa6\x62\x5b\xc4\xaa\x25\xe6\xf4\x49\x3e\x98\x30\x4a\x3f\x19\x04\xdc\x00\xfb\xd6\xe8\xb3\xdf\x4f\x4e\xda\xc7\x8f\x16\x6c\xb1\x18\xbc\xb3\x8b\x0d\xba\x4e\xd7\x9f\x2f\x57\x3d\x04\x0a\x1e\x87\x56\x72\xaa\x94\x01\x84\x5a\x9b\x92\xe7\x06\xfd\xb3\xe7\x14\x1b\xaf\x20\x42\x96\x5f\xfc\xfb\x28\x9d\x4d\x13\x93\xff\x14\xe5\x75\x34\xcb\x17\x74\x43\xb9\x8b\x44\xb5\x54\x90\xa4\x20\xeb\x34\xba\xbe\x3c\x5f\xe7\xc8\x69\x06\x8a\xde\x95\x92\xcb\xee\x0c\x75\x50\xbd\x23\x9f\x65\x12\x3b\x6b\x94\xb6\x2d\xca\xa2\x15\x2d\x9b\x8e\x95\x8d\x36\x71\x8b\x10\xce\xf3\x5b\x9b\xdd\x8c\x14\xfb\x09\x67\xe8\xf4\x43\xfb\x88\x6d\x33\xdc\x42\xa7\x98\x14\xb6\x1d\xfa\xc8\xfe\xd5\x9c\x0e\xf4\x84\x35\x78\xba\xfe\xc8\x3f\x7d\x45\x37\xd9\xf9\xe6\x32\x5f\xbd\x49\x55\x69\xba\xc7\x16\x77\x80\x28\x97\x5e\xcd\x80\x57\xa6\x5d\x87\x74\x17\x09\x87\x6f\x20\x2a\x92\x0a\x53\xd0\x5f\x52\xe9\x7b\xd9\x15\x49\x3c\x68\x17\xde\x4a\xd3\x82\x83\x8f\xe1\x04\x4c\xdc\xca\x62\xc2\xee\xbf\x13\xed\xfa\x70\x54\x84\x6b\x06\xa7\xf3\x20\x85\xec\xcc\x2e\x70\x50\xca\xef\xc4\x10\xa9\x22\x28\x90\xa7\xde\x2d\x1b\x28\xef\x0b\xf9\x78\x03\x1c\x4a\xfd\x45\x19\x1e\x31\x09\xc8\xf2\xf6\x4c\xb4\x0f\x1a\xe9\xa7\x16\x26\x1f\xdc\x23\x14\x77\x4a\xd6\x66\xce\x84\xdf\x38\x8c\x62\x92\x70\x5a\x00\x47\x46\x7f\xd0\x82\xa4\x5c\xa1\x9b\xb9\x12\x51\xf1\xd3\x8c\x0e\x08\x43\x94\x75\x9e\x27\xe0\xf6\xf3\x57\x51\xa8\xf6\xa3\xef\x17\x14\x96\x64\xce\x81\x89\xd9\xb1\xe6\xb9\xcd\x41\x94\x7d\x8c\x40\xfe\x1f\x68\x6f\xc1\x25\x73\x71\x11\x72\xc4\xc4\x1d\xd0\x7b\x6d\x1a\x20\x8b\x52\xf3\x46\x67\x07\x59\x08\xb7\x41\xc3\xa3\xee\xb7\x60\x74\x36\xc4\xcf\xb3\x8e\x5f\xa6\x3d\x7d\x9a\xd5\x6e\x82\x37\x92\x3f\xeb\x06\xd1\x36\x24\xf1\x2e\xa6\xcf\x46\xdf\xa1\xeb\xe3\x59\xdb\xff\xc3\x28\x8c\x63\x3d\x8e\x81\x37\xf0\xad\xb8\x95\x1d\xa7\x66\x05\xfb\xf3\xdb\xcb\x63\x8e\x7b\x84\x4d\x06\xb7\xc3\xd7\x4b\xd6\x5e\x67\x6c\x3f\xdc\x0c\x30\x89\x9d\xdf\x04\x53\x3c\x68\x2d\x85\xf3\x2d\xf4\x4b\xe7\x99\x2e\xe0\x94\xf9\xc1\xac\x29\xaa\x69\x04\x9c\xb3\x56\x31\x15\x35\x2e\xc4\x04\x1f\xf7\xf8\x13\xf9\x76\x00\x5f\x63\x7a\x54\xdb\x33\xec\xcf\xcd\xf5\x15\xca\x3e\x5d\x6e\xf2\xf5\x70\x2f\x85\x9c\x42\xc5\xb4\xec\xee\xb2\xd5\x34\x79\x03\x76\x00\x61\x6f\x8d\x43\x30\xa1\xe5\x68\x18\x9e\x99\xd6\x72\x6a\x88\xc9\xee\x22\xcf\x37\xd9\x3a\xb4\x7a\xfd\x68\xad\xa5\xd4\xc1\xbd\xb1\xc7\xb3\xa2\x5b\x08\x39\x76\x32\xb9\x49\x6f\xb3\x3d\xca\xf6\x1d\x4b\x2a\x4a\xe0\xa1\xeb\xa0\x21\xe7\xe9\xea\x3c\xbb\x9a\xbb\x1f\xba\x47\x87\x22\x6c\x89\x53\xf6\xa3\xe1\x74\xdd\x06\x7f\x09\xfa\xdf\x6e\x67\xba\xdb\xfe\x97\x39\x3e\xfa\x3b\x00\x00\xff\xff\xf1\xe2\xe4\xf0\xe1\x08\x00\x00")

func viewsIndex_igHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndex_igHtml,
		"views/index_ig.html",
	)
}

func viewsIndex_igHtml() (*asset, error) {
	bytes, err := viewsIndex_igHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index_ig.html", size: 2273, mode: os.FileMode(438), modTime: time.Unix(1449223316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsBaseFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xc1\x6e\xc2\x30\x0c\x86\xcf\x4c\xda\x3b\x64\xbd\x97\xbc\x00\x70\xd8\x4e\x9b\x76\x9b\xb4\x7b\x48\x0c\xb8\xa2\x49\xe7\x98\x6a\x55\xc5\xbb\xcf\x81\x0c\x55\xc0\x81\x6e\xdc\x5c\xd7\xfe\xfe\xdf\xb6\xd2\xf7\x0e\x56\xe8\x41\x15\xab\x10\xb8\xd8\xef\x1f\x1f\x66\x29\x02\x5a\xcc\x74\x0e\x24\xa5\x1d\xb6\x0b\x35\x7b\x2a\x4b\xa5\x6d\xf0\x6c\xa4\x85\x54\x59\xa6\x7f\x29\xf9\x5a\x37\x81\x18\xfd\x5a\xbd\xe3\x92\x0c\x21\x44\xa5\x95\x83\x06\xbc\x03\x6f\xd3\xe7\xa1\x38\x97\xbf\x7d\xed\x80\xba\x5c\xdb\x65\x4e\xb4\x84\x0d\x2b\xee\x1a\x98\x17\x0c\xdf\xac\x2b\xd3\x9a\x63\xb6\x50\x91\xec\xbc\xd0\x55\xd4\xd5\xa1\x77\x5a\xa3\x9f\x56\xb1\x10\x97\xc7\x8a\x85\x1a\x8b\x28\x77\x78\x46\x50\x27\x83\xcf\x32\x79\x64\x32\xcd\x60\x1e\x71\x39\x42\x63\xf9\x4b\xb8\xea\x34\xcb\x7c\x34\xe8\x87\x5b\x98\x4c\x6e\x17\x88\xd2\x7b\xc9\xce\xe0\xd6\x6c\xd1\x19\xc6\xe0\x4f\x58\x49\x8f\xf6\xfe\x79\xc4\x04\xba\x14\x1a\x9e\x13\xfd\x8a\xcc\x1a\x23\xa3\x8d\x57\x8e\x7e\xab\xec\x10\x33\x95\xe3\x6c\xb8\xde\x82\x43\x91\x2f\x1d\x5c\x8c\xf9\x17\xa8\x0d\x74\x1f\x90\x6b\xef\x82\xd9\x86\xe5\x39\x27\xaf\xf4\x65\x17\x39\xd4\xff\x58\x26\x78\x63\x37\x84\x76\xc3\x57\x14\xe4\xc2\xae\x3b\xbc\xeb\xb4\x63\x09\xfa\x5e\x64\xd2\xe3\xff\x09\x00\x00\xff\xff\x00\xe6\xc2\xd4\x10\x04\x00\x00")

func viewsBaseFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseFooterHtml,
		"views/base/footer.html",
	)
}

func viewsBaseFooterHtml() (*asset, error) {
	bytes, err := viewsBaseFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/footer.html", size: 1040, mode: os.FileMode(438), modTime: time.Unix(1455100769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsBaseHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x6a\x32\x31\x14\xc5\xf7\x82\xef\x30\x5f\xd6\x5f\x1c\xba\xeb\xc2\x08\x22\x52\x5c\xb4\x05\xa1\xd0\x6d\xcc\x9c\x31\xb7\x9d\x24\x63\x72\x67\x44\x06\xdf\xbd\xa3\xa5\xf8\x67\x63\x2d\x59\xe5\xe6\xfc\x6e\xce\x49\x6e\xd7\x15\x28\xc9\x23\x13\x16\xba\x10\xfb\xfd\x70\x30\x1c\x8c\x1d\x58\x67\xc6\xea\x98\xc0\x4a\x34\x5c\xca\x47\x31\xf9\xa9\x5b\xe6\x5a\x62\xd3\x50\xab\xc4\xbb\x7c\x9b\xca\x59\x70\xb5\x66\x5a\x55\x10\x99\x09\x9e\xe1\x7b\x68\x31\x57\x28\xd6\x38\x61\x5e\x3b\x28\xd1\x12\xb6\x75\x88\x7c\xa6\xdc\x52\xc1\x56\x15\x68\xc9\x40\x1e\x37\xff\x33\xf2\xc4\xa4\x2b\x99\x8c\xae\xa0\x1e\xae\xbb\x14\x48\x26\x52\xcd\x14\xfc\x59\xa3\x6b\x95\x6e\xd8\x86\x78\x2d\x60\xe2\x0a\x93\xe5\x54\x3e\x2f\x66\xcb\xd7\xec\x29\x64\x73\xf9\xa2\x8d\x8d\x64\x2c\x8f\xf3\xef\xe3\x5e\x57\x91\xff\xcc\x22\x2a\x25\x12\xef\x2a\x24\x0b\xf4\xae\x6d\x44\xa9\x44\x6e\x52\xca\x57\x21\x70\xe2\xa8\xeb\x91\x23\x3f\xea\x2b\x22\x9f\x1c\x5f\xef\x26\x59\xf6\x86\xa4\xde\x22\x05\x87\x0b\xf8\x36\xfa\xb1\x69\x10\x77\xb2\xa1\x3b\x18\xed\xc9\x69\xc6\x89\xf8\x27\xe5\x5d\x01\x65\x44\xaa\x83\x4f\xd4\x5e\xda\x95\xf2\x57\xf7\x3b\x7d\x57\x44\xf2\x65\xd4\x6b\x4a\x4c\x26\x8d\xd8\xc2\xe1\xaf\xf0\xe9\x4f\x0e\xab\xeb\xe0\x8b\xc3\x80\x7f\x05\x00\x00\xff\xff\xc1\x56\xd4\x38\xf4\x02\x00\x00")

func viewsBaseHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHeaderHtml,
		"views/base/header.html",
	)
}

func viewsBaseHeaderHtml() (*asset, error) {
	bytes, err := viewsBaseHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/header.html", size: 756, mode: os.FileMode(438), modTime: time.Unix(1455116505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/auswahlliste.html": viewsAuswahllisteHtml,
	"views/base.html": viewsBaseHtml,
	"views/index.html": viewsIndexHtml,
	"views/index_ig.html": viewsIndex_igHtml,
	"views/base/footer.html": viewsBaseFooterHtml,
	"views/base/header.html": viewsBaseHeaderHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"auswahlliste.html": &bintree{viewsAuswahllisteHtml, map[string]*bintree{}},
		"base": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{viewsBaseFooterHtml, map[string]*bintree{}},
			"header.html": &bintree{viewsBaseHeaderHtml, map[string]*bintree{}},
		}},
		"base.html": &bintree{viewsBaseHtml, map[string]*bintree{}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{}},
		"index_ig.html": &bintree{viewsIndex_igHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

