// Code generated by go-bindata.
// sources:
// views/base.html
// views/index.html
// views/base/footer.html
// views/base/header.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\x4a\x2c\x4e\x55\xaa\xad\xe5\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x01\x51\x0a\x39\x89\x79\xe9\xb6\x4a\xa9\x79\x4a\x76\x5c\x0a\x40\x60\x93\x91\x9a\x98\x02\x61\x82\x40\x75\x75\x49\x6a\x6e\x41\x4e\x62\x09\xd0\x1c\x90\x8c\x92\x82\x1e\xd0\x24\xb0\x42\x7d\x84\x4a\x9b\xa4\xfc\x94\x4a\x3b\x20\x03\xcc\xe3\x42\xd7\x08\x92\x85\x68\xe4\x44\x16\x4e\xcb\xcf\x2f\x41\x36\x0f\x6c\x08\x17\xd0\x5c\xb0\xeb\xaa\xab\x53\xf3\x52\x80\x72\x80\x00\x00\x00\xff\xff\xc1\x57\x7d\xed\xc8\x00\x00\x00")

func viewsBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHtml,
		"views/base.html",
	)
}

func viewsBaseHtml() (*asset, error) {
	bytes, err := viewsBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base.html", size: 200, mode: os.FileMode(438), modTime: time.Unix(1441892636, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xc1\x6e\xdb\x30\x0c\x86\xcf\xd6\x53\xb0\xba\xf4\x32\xd9\x0b\x7a\x29\x0a\x59\x40\x60\xa4\x6b\x0e\x4b\x00\x2f\xd8\x5d\xb1\x99\x5a\x80\x22\x19\x96\x9a\xae\x33\xf2\xee\xa3\x94\x75\x68\x80\xa1\x39\x44\x16\xf9\x8b\xe4\xa7\x5f\xf3\xdc\xe3\xc1\x38\x04\xbe\xf7\xfd\x1b\x3f\x9f\x19\x80\x3c\x62\xd4\xd0\x0d\x7a\x0a\x18\x6b\xfe\x12\x0f\xe2\x9e\x2b\xa0\x5f\x4a\x46\x13\x2d\xaa\x79\x2e\x77\xe9\xe3\x7c\x96\xd5\x25\x72\xc9\xe6\xa3\x4e\x1f\xb1\xe6\x27\x83\xaf\xa3\x9f\x22\x87\xce\xbb\x88\x8e\x4a\xbd\x9a\x3e\x0e\x75\x8f\x27\xd3\xa1\xc8\x9b\x2f\x60\x9c\x89\x46\x5b\x11\x3a\x6d\xb1\x5e\x94\x5f\xb9\x62\xb2\x1a\x50\xf7\xb4\xa6\xa1\x40\xb1\x42\xde\x08\x01\xcd\x76\xb3\x5b\xae\x37\xab\x16\x1e\xb7\x2d\xac\xc4\x66\xd9\x3c\xb5\xeb\xe6\x69\x07\x20\x84\x02\x26\x7b\x73\x82\xce\xea\x10\x6a\x9e\x5a\x6a\xe2\x9a\xa8\x1a\x0d\xfe\x31\x35\x6a\x87\x16\xf2\xbf\x20\x78\xfd\x62\x23\x89\x8a\xa2\xc8\xa2\x2b\x95\x48\x63\x18\xf7\x9c\xe9\x93\xa4\x90\xc3\xe2\x5a\x91\xe1\x39\x68\x6b\x9e\x1d\xb5\x25\xcc\xd4\x53\x06\xca\x2a\xb9\x57\xed\x52\x7c\x5f\x37\xed\x16\x72\x04\x42\x7c\x23\xc8\xdb\xce\x5b\x3f\x3d\xc0\x84\xfd\xad\xfa\xe6\x65\x95\xd5\xb0\x1c\xc7\x44\xa5\xbb\x61\x32\xdd\x10\x41\x56\x7b\xf5\xf1\x18\x3f\x10\x94\x08\xe6\x37\x3e\xc0\xe2\x7e\xfc\xc5\x93\x0b\x3f\x71\x0a\xc6\xbb\xe4\xc3\xa5\xe7\xfb\x32\x2c\x12\x54\x72\x4d\x56\x04\xa6\x20\x8d\xcf\x72\x00\xfe\x77\x23\x22\x3f\x00\xf5\x97\xf2\x4e\x35\xfe\x48\xe4\xf0\xc3\x7b\x57\x96\xe5\x0d\x15\xbc\xbb\xdc\x52\xae\xc6\xde\x57\xf8\xb7\x4f\x16\xad\xb6\x8f\x9f\xd8\x44\x2e\x31\x36\xcf\xe8\x7a\x7a\x67\xec\x4f\x00\x00\x00\xff\xff\x43\x96\x08\x7f\x7b\x02\x00\x00")

func viewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexHtml,
		"views/index.html",
	)
}

func viewsIndexHtml() (*asset, error) {
	bytes, err := viewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.html", size: 635, mode: os.FileMode(438), modTime: time.Unix(1448629067, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsBaseFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xc1\x6e\xb3\x30\x10\x84\xcf\xc9\x53\xf8\xf7\xdd\xf1\x0b\x10\x0e\x7f\x4f\xad\x7a\xab\xd4\xbb\x83\x97\x64\x69\xb0\x5d\x7b\x21\xb5\x50\xde\xbd\xa6\x4e\xa3\x28\xb4\x12\xf4\x66\xcc\xcc\xb7\x33\x5a\x18\x06\x0d\x35\x1a\x60\xbc\xb6\x96\xf8\xf9\xbc\x2e\xc6\x03\xf8\xb2\x90\x97\xc3\xba\x90\x1a\xfb\x92\x15\xff\x84\x60\xb2\xb2\x86\x54\x32\x78\x26\x44\x7a\x35\xde\x3d\xb6\xce\x7a\x42\xb3\x67\xcf\xb8\xf3\xca\x23\x04\x26\x99\x06\x07\x46\x83\xa9\xc6\xc7\x51\x9b\xc5\x4f\xef\x1d\xf8\x78\x51\xc6\x0c\x09\x95\x47\x47\x8c\xa2\x83\x2d\x27\xf8\x20\xd9\xa8\x5e\xe5\x5b\xce\x82\xaf\xb6\x5c\x36\x41\x36\x5f\xd6\x4d\x8b\x66\xd3\x04\x9e\x02\x66\x45\xc9\x16\x12\x44\x87\x77\x00\x96\xb3\xfd\x4f\x85\x03\x79\xe5\x6e\x8a\xa4\x80\xf3\xf9\xbb\x6f\xc0\x34\x64\x9e\xf0\xe2\xd0\xdc\x76\x5f\xad\x66\xb3\x43\xb2\xfe\x86\xed\xd5\x11\xb5\x22\xb4\x66\x21\xf4\x1a\xf8\x35\x13\xac\xff\x61\x44\x9e\xf1\xd0\x05\xb2\xed\x74\xad\x0b\xb7\x77\xb0\xf4\x06\x31\xdc\xb7\x98\x09\x71\x1e\x88\xb0\x8e\x7f\xb4\x5f\xeb\x8a\x53\x0c\x78\x8a\xfb\x49\xd3\x24\xd1\x71\xfc\xe4\x0f\xd4\x1e\xcb\xf5\x30\xa4\xb2\xe9\xa7\xf8\x0c\x00\x00\xff\xff\x2c\x48\x82\x52\x27\x03\x00\x00")

func viewsBaseFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseFooterHtml,
		"views/base/footer.html",
	)
}

func viewsBaseFooterHtml() (*asset, error) {
	bytes, err := viewsBaseFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/footer.html", size: 807, mode: os.FileMode(438), modTime: time.Unix(1448443573, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _viewsBaseHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x4f\x6b\xdb\x40\x10\xc5\xef\xfe\x14\x93\x3d\x77\x2d\x7a\x08\xa4\x60\x19\x4c\x30\xad\xa1\xa6\x60\xda\x52\x08\x39\xac\xb5\xa3\x6a\xdc\xfd\xa3\xec\x8c\xe4\x04\x93\xef\xde\xb5\xec\x9a\x60\x72\xb0\x7b\xdc\xd1\xfb\xbd\x7d\xd2\x3c\xed\x76\x16\x6b\x0a\x08\xaa\x41\x63\xd5\xeb\xeb\x68\x34\xf1\x28\x06\xaa\xc6\x24\x46\x29\x55\x27\xb5\xbe\x53\xd3\xe3\xb8\x11\x69\x35\x3e\x75\xd4\x97\xea\x97\xfe\x31\xd3\xf7\xd1\xb7\x46\x68\xed\x50\x41\x15\x83\x60\xc8\xcc\x62\x5e\xa2\xfd\x8d\x27\x2a\x18\x8f\xa5\xea\x09\xb7\x6d\x4c\xf2\x46\xb8\x25\x2b\x4d\x69\xb1\xa7\x0a\xf5\x70\xf8\x00\x14\x48\xc8\x38\xcd\x95\x71\x58\x7e\x3c\x33\xb1\xc8\x55\xa2\x56\x28\x86\x37\x3e\x67\x22\xd3\x49\x13\xd3\xd9\x73\x21\x71\x38\x5d\xcd\xf4\x72\x71\xbf\xfa\x06\x9f\x23\xcc\xda\x16\xe6\x7a\x69\xc8\xc1\xfc\x79\x9f\x0c\xd3\xa4\x38\xc8\x46\x13\x47\xe1\x0f\x24\x74\xa5\x62\x79\x71\xc8\x0d\x62\x4e\xde\x24\xac\x4b\x55\x54\xcc\xc5\x3a\x46\x61\x49\xa6\x1d\x7b\x0a\xe3\x3c\x51\xc5\x25\x58\x9d\x33\x69\xb3\x45\x8e\x1e\xaf\x23\x37\x4f\x1d\xa6\x17\xdd\xd1\xe5\x88\x09\xe4\x8d\xe0\xe5\xc0\xe9\xa5\x7e\x1a\x47\xd6\x48\x4c\xd7\x65\x3c\xf1\xba\x8a\x7e\x9d\x8b\x65\xc7\x21\x6a\xca\x8b\xe0\xff\x35\x4a\xc8\x6d\xc6\xa9\xbf\xf2\x73\x51\xb0\xf8\xfc\x4f\x3e\x9a\xdc\x68\x0d\x5f\xbe\x2f\xbf\xde\x02\x37\xe4\xc1\x04\x0b\xab\xc1\xd9\x8e\x37\x0c\x75\x4c\xb0\x98\xdf\x01\x77\xed\xbe\x08\x10\xeb\xa3\x18\x1d\xfa\x5c\x21\x1e\x00\x8f\x96\x0c\xec\xd7\x40\xc8\xa0\xf5\x74\xb0\x7d\xa0\x1a\x9c\x64\x1c\x3e\x3d\xe6\xc9\xa1\x9f\xc0\xa9\xca\x41\x36\x5c\x34\xe2\xdd\x6d\xbe\xb3\x1f\xe2\x6f\x58\x4d\x27\xc5\x41\xf3\x8e\x38\x1d\x23\xbd\x23\xbd\x79\xc0\x60\xa9\x7e\xdc\x5f\x3b\xda\xed\xf2\x21\xff\xad\x7f\x03\x00\x00\xff\xff\xf9\x08\x70\x8d\xc0\x03\x00\x00")

func viewsBaseHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewsBaseHeaderHtml,
		"views/base/header.html",
	)
}

func viewsBaseHeaderHtml() (*asset, error) {
	bytes, err := viewsBaseHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/base/header.html", size: 960, mode: os.FileMode(438), modTime: time.Unix(1448446276, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/base.html": viewsBaseHtml,
	"views/index.html": viewsIndexHtml,
	"views/base/footer.html": viewsBaseFooterHtml,
	"views/base/header.html": viewsBaseHeaderHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"base": &bintree{nil, map[string]*bintree{
			"footer.html": &bintree{viewsBaseFooterHtml, map[string]*bintree{
			}},
			"header.html": &bintree{viewsBaseHeaderHtml, map[string]*bintree{
			}},
		}},
		"base.html": &bintree{viewsBaseHtml, map[string]*bintree{
		}},
		"index.html": &bintree{viewsIndexHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

